// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service_video_forge.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideosForge_RenewAccessToken_FullMethodName = "/pb.VideosForge/RenewAccessToken"
	VideosForge_UserLogin_FullMethodName        = "/pb.VideosForge/UserLogin"
	VideosForge_CreateUser_FullMethodName       = "/pb.VideosForge/CreateUser"
	VideosForge_GenerateVideo_FullMethodName    = "/pb.VideosForge/GenerateVideo"
	VideosForge_GetVideos_FullMethodName        = "/pb.VideosForge/GetVideos"
)

// VideosForgeClient is the client API for VideosForge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideosForgeClient interface {
	RenewAccessToken(ctx context.Context, in *RenewAccessTokenRequest, opts ...grpc.CallOption) (*RenewAccessTokenResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GenerateVideo(ctx context.Context, in *GenerateVideoRequest, opts ...grpc.CallOption) (*GenerateVideoResponse, error)
	GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*GetVideosResponse, error)
}

type videosForgeClient struct {
	cc grpc.ClientConnInterface
}

func NewVideosForgeClient(cc grpc.ClientConnInterface) VideosForgeClient {
	return &videosForgeClient{cc}
}

func (c *videosForgeClient) RenewAccessToken(ctx context.Context, in *RenewAccessTokenRequest, opts ...grpc.CallOption) (*RenewAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewAccessTokenResponse)
	err := c.cc.Invoke(ctx, VideosForge_RenewAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosForgeClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, VideosForge_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosForgeClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, VideosForge_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosForgeClient) GenerateVideo(ctx context.Context, in *GenerateVideoRequest, opts ...grpc.CallOption) (*GenerateVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateVideoResponse)
	err := c.cc.Invoke(ctx, VideosForge_GenerateVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosForgeClient) GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*GetVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideosResponse)
	err := c.cc.Invoke(ctx, VideosForge_GetVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideosForgeServer is the server API for VideosForge service.
// All implementations must embed UnimplementedVideosForgeServer
// for forward compatibility.
type VideosForgeServer interface {
	RenewAccessToken(context.Context, *RenewAccessTokenRequest) (*RenewAccessTokenResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GenerateVideo(context.Context, *GenerateVideoRequest) (*GenerateVideoResponse, error)
	GetVideos(context.Context, *GetVideosRequest) (*GetVideosResponse, error)
	mustEmbedUnimplementedVideosForgeServer()
}

// UnimplementedVideosForgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideosForgeServer struct{}

func (UnimplementedVideosForgeServer) RenewAccessToken(context.Context, *RenewAccessTokenRequest) (*RenewAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewAccessToken not implemented")
}
func (UnimplementedVideosForgeServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedVideosForgeServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedVideosForgeServer) GenerateVideo(context.Context, *GenerateVideoRequest) (*GenerateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideo not implemented")
}
func (UnimplementedVideosForgeServer) GetVideos(context.Context, *GetVideosRequest) (*GetVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideos not implemented")
}
func (UnimplementedVideosForgeServer) mustEmbedUnimplementedVideosForgeServer() {}
func (UnimplementedVideosForgeServer) testEmbeddedByValue()                     {}

// UnsafeVideosForgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideosForgeServer will
// result in compilation errors.
type UnsafeVideosForgeServer interface {
	mustEmbedUnimplementedVideosForgeServer()
}

func RegisterVideosForgeServer(s grpc.ServiceRegistrar, srv VideosForgeServer) {
	// If the following call pancis, it indicates UnimplementedVideosForgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideosForge_ServiceDesc, srv)
}

func _VideosForge_RenewAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosForgeServer).RenewAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideosForge_RenewAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosForgeServer).RenewAccessToken(ctx, req.(*RenewAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideosForge_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosForgeServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideosForge_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosForgeServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideosForge_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosForgeServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideosForge_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosForgeServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideosForge_GenerateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosForgeServer).GenerateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideosForge_GenerateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosForgeServer).GenerateVideo(ctx, req.(*GenerateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideosForge_GetVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosForgeServer).GetVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideosForge_GetVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosForgeServer).GetVideos(ctx, req.(*GetVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideosForge_ServiceDesc is the grpc.ServiceDesc for VideosForge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideosForge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VideosForge",
	HandlerType: (*VideosForgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenewAccessToken",
			Handler:    _VideosForge_RenewAccessToken_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _VideosForge_UserLogin_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _VideosForge_CreateUser_Handler,
		},
		{
			MethodName: "GenerateVideo",
			Handler:    _VideosForge_GenerateVideo_Handler,
		},
		{
			MethodName: "GetVideos",
			Handler:    _VideosForge_GetVideos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_video_forge.proto",
}
