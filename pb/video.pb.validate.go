// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Url

	// no validation rules for Duration

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on GenerateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateVideoRequestMultiError, or nil if none found.
func (m *GenerateVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoSubject

	// no validation rules for VideoScript

	// no validation rules for VideoTerms

	// no validation rules for VideoAspect

	// no validation rules for VideoConCatMode

	// no validation rules for VideoTransitionMode

	// no validation rules for VideoClipDuration

	// no validation rules for VideoCount

	// no validation rules for VideoSource

	// no validation rules for VideoMaterals

	// no validation rules for VideoLanguage

	// no validation rules for VoiceName

	// no validation rules for VoiceVolume

	// no validation rules for VoiceRate

	// no validation rules for BgmType

	// no validation rules for BgmFile

	// no validation rules for BgmVolume

	// no validation rules for SubtitleEnabled

	// no validation rules for SubtitlePosition

	// no validation rules for CustomPosition

	// no validation rules for FontName

	// no validation rules for TextForeColor

	// no validation rules for TextBackgroundColor

	// no validation rules for FontSize

	// no validation rules for StrokeColor

	// no validation rules for StrokeWidth

	// no validation rules for NThreads

	// no validation rules for ParagraphNumber

	// no validation rules for FileName

	if len(errors) > 0 {
		return GenerateVideoRequestMultiError(errors)
	}

	return nil
}

// GenerateVideoRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateVideoRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateVideoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateVideoRequestMultiError) AllErrors() []error { return m }

// GenerateVideoRequestValidationError is the validation error returned by
// GenerateVideoRequest.Validate if the designated constraints aren't met.
type GenerateVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateVideoRequestValidationError) ErrorName() string {
	return "GenerateVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateVideoRequestValidationError{}

// Validate checks the field values on GenerateVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateVideoResponseMultiError, or nil if none found.
func (m *GenerateVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GenerateVideoResponseMultiError(errors)
	}

	return nil
}

// GenerateVideoResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateVideoResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateVideoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateVideoResponseMultiError) AllErrors() []error { return m }

// GenerateVideoResponseValidationError is the validation error returned by
// GenerateVideoResponse.Validate if the designated constraints aren't met.
type GenerateVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateVideoResponseValidationError) ErrorName() string {
	return "GenerateVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateVideoResponseValidationError{}

// Validate checks the field values on GetVideosRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVideosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideosRequestMultiError, or nil if none found.
func (m *GetVideosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := GetVideosRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetNum(); val < 1 || val > 20 {
		err := GetVideosRequestValidationError{
			field:  "Num",
			reason: "value must be inside range [1, 20]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVideosRequestMultiError(errors)
	}

	return nil
}

// GetVideosRequestMultiError is an error wrapping multiple validation errors
// returned by GetVideosRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVideosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideosRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideosRequestMultiError) AllErrors() []error { return m }

// GetVideosRequestValidationError is the validation error returned by
// GetVideosRequest.Validate if the designated constraints aren't met.
type GetVideosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideosRequestValidationError) ErrorName() string { return "GetVideosRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVideosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideosRequestValidationError{}

// Validate checks the field values on GetVideosResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVideosResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideosResponseMultiError, or nil if none found.
func (m *GetVideosResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideosResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVideosResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVideosResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVideosResponseValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetVideosResponseMultiError(errors)
	}

	return nil
}

// GetVideosResponseMultiError is an error wrapping multiple validation errors
// returned by GetVideosResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVideosResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideosResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideosResponseMultiError) AllErrors() []error { return m }

// GetVideosResponseValidationError is the validation error returned by
// GetVideosResponse.Validate if the designated constraints aren't met.
type GetVideosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideosResponseValidationError) ErrorName() string {
	return "GetVideosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideosResponseValidationError{}
