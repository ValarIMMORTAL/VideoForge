// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: publisher.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadVideoRequestMultiError, or nil if none found.
func (m *UploadVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TempDir

	// no validation rules for Title

	// no validation rules for UserName

	// no validation rules for Bucket

	// no validation rules for Subscribe

	// no validation rules for Domain

	// no validation rules for FileName

	// no validation rules for PlatformName

	// no validation rules for UserId

	// no validation rules for Description

	if len(errors) > 0 {
		return UploadVideoRequestMultiError(errors)
	}

	return nil
}

// UploadVideoRequestMultiError is an error wrapping multiple validation errors
// returned by UploadVideoRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadVideoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadVideoRequestMultiError) AllErrors() []error { return m }

// UploadVideoRequestValidationError is the validation error returned by
// UploadVideoRequest.Validate if the designated constraints aren't met.
type UploadVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadVideoRequestValidationError) ErrorName() string {
	return "UploadVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadVideoRequestValidationError{}

// Validate checks the field values on UploadVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadVideoResponseMultiError, or nil if none found.
func (m *UploadVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return UploadVideoResponseMultiError(errors)
	}

	return nil
}

// UploadVideoResponseMultiError is an error wrapping multiple validation
// errors returned by UploadVideoResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadVideoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadVideoResponseMultiError) AllErrors() []error { return m }

// UploadVideoResponseValidationError is the validation error returned by
// UploadVideoResponse.Validate if the designated constraints aren't met.
type UploadVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadVideoResponseValidationError) ErrorName() string {
	return "UploadVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadVideoResponseValidationError{}
