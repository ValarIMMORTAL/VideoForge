// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: platforms.sql

package db

import (
	"context"
)

const getPlatforms = `-- name: GetPlatforms :many
select id,platform,detail
from platforms
where delete_at is null
order by id
`

type GetPlatformsRow struct {
	ID       int64  `json:"id"`
	Platform string `json:"platform"`
	Detail   string `json:"detail"`
}

func (q *Queries) GetPlatforms(ctx context.Context) ([]GetPlatformsRow, error) {
	rows, err := q.db.Query(ctx, getPlatforms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlatformsRow{}
	for rows.Next() {
		var i GetPlatformsRow
		if err := rows.Scan(&i.ID, &i.Platform, &i.Detail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlatformsByName = `-- name: GetPlatformsByName :one
select id,platform,detail
from platforms
where delete_at is null
and platform=$1
limit 1
`

type GetPlatformsByNameRow struct {
	ID       int64  `json:"id"`
	Platform string `json:"platform"`
	Detail   string `json:"detail"`
}

func (q *Queries) GetPlatformsByName(ctx context.Context, platform string) (GetPlatformsByNameRow, error) {
	row := q.db.QueryRow(ctx, getPlatformsByName, platform)
	var i GetPlatformsByNameRow
	err := row.Scan(&i.ID, &i.Platform, &i.Detail)
	return i, err
}
