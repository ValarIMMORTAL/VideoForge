// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: third_keys.sql

package db

import (
	"context"
)

const getThirdKeyByName = `-- name: GetThirdKeyByName :one
select id, name, ak, sk, created_at, delete_at
from third_keys
where name = $1
and delete_at is null
`

func (q *Queries) GetThirdKeyByName(ctx context.Context, name string) (ThirdKey, error) {
	row := q.db.QueryRow(ctx, getThirdKeyByName, name)
	var i ThirdKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ak,
		&i.Sk,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const insertThirdKey = `-- name: InsertThirdKey :one
insert into third_keys(
    name,
    ak,
    sk
) values (
          $1,$2,$3
         ) RETURNING id, name, ak, sk, created_at, delete_at
`

type InsertThirdKeyParams struct {
	Name string `json:"name"`
	Ak   string `json:"ak"`
	Sk   string `json:"sk"`
}

func (q *Queries) InsertThirdKey(ctx context.Context, arg InsertThirdKeyParams) (ThirdKey, error) {
	row := q.db.QueryRow(ctx, insertThirdKey, arg.Name, arg.Ak, arg.Sk)
	var i ThirdKey
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Ak,
		&i.Sk,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}
