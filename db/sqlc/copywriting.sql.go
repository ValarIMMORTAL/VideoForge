// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copywriting.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCopy = `-- name: CreateCopy :one
INSERT INTO copywriting(
    title,
    source,
    content,
    date
) values (
    $1,$2,$3,$4
) returning id, source, title, content, date, created_at, delete_at
`

type CreateCopyParams struct {
	Title   string           `json:"title"`
	Source  string           `json:"source"`
	Content string           `json:"content"`
	Date    pgtype.Timestamp `json:"date"`
}

func (q *Queries) CreateCopy(ctx context.Context, arg CreateCopyParams) (Copywriting, error) {
	row := q.db.QueryRow(ctx, createCopy,
		arg.Title,
		arg.Source,
		arg.Content,
		arg.Date,
	)
	var i Copywriting
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Title,
		&i.Content,
		&i.Date,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const createMultipleCopy = `-- name: CreateMultipleCopy :exec
INSERT INTO copywriting(
    title,
    source,
    content,
    date
)
select
    unnest($1::text[]),
    unnest($2::text[]),
    unnest($3::text[]),
    unnest($4::timestamp[])
`

type CreateMultipleCopyParams struct {
	Column1 []string           `json:"column_1"`
	Column2 []string           `json:"column_2"`
	Column3 []string           `json:"column_3"`
	Column4 []pgtype.Timestamp `json:"column_4"`
}

func (q *Queries) CreateMultipleCopy(ctx context.Context, arg CreateMultipleCopyParams) error {
	_, err := q.db.Exec(ctx, createMultipleCopy,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const deleteCopy = `-- name: DeleteCopy :exec
update copywriting
set delete_at = $1
where id = $2
`

type DeleteCopyParams struct {
	DeleteAt pgtype.Timestamp `json:"delete_at"`
	ID       int64            `json:"id"`
}

func (q *Queries) DeleteCopy(ctx context.Context, arg DeleteCopyParams) error {
	_, err := q.db.Exec(ctx, deleteCopy, arg.DeleteAt, arg.ID)
	return err
}

const getCopy = `-- name: GetCopy :one
select id, source, title, content, date, created_at, delete_at from copywriting
where id = $1
  and delete_at = null
    limit 1
`

func (q *Queries) GetCopy(ctx context.Context, id int64) (Copywriting, error) {
	row := q.db.QueryRow(ctx, getCopy, id)
	var i Copywriting
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Title,
		&i.Content,
		&i.Date,
		&i.CreatedAt,
		&i.DeleteAt,
	)
	return i, err
}

const listCopies = `-- name: ListCopies :many
select id, source, title, content, date, created_at, delete_at from copywriting
where date = $1
and deleta_at = null
order by id
limit $2
offset $3
`

type ListCopiesParams struct {
	Date   pgtype.Timestamp `json:"date"`
	Limit  int32            `json:"limit"`
	Offset int32            `json:"offset"`
}

func (q *Queries) ListCopies(ctx context.Context, arg ListCopiesParams) ([]Copywriting, error) {
	rows, err := q.db.Query(ctx, listCopies, arg.Date, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Copywriting{}
	for rows.Next() {
		var i Copywriting
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.Title,
			&i.Content,
			&i.Date,
			&i.CreatedAt,
			&i.DeleteAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
